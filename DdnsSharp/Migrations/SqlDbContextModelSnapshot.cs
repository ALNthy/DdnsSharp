// <auto-generated />
using System;
using DdnsSharp.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DdnsSharp.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    partial class SqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("DdnsSharp.Model.DdnsConfig", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("IPV4Guid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("IPV6Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceName")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("Ttl")
                        .HasColumnType("INTEGER");

                    b.HasKey("Guid");

                    b.HasIndex("IPV4Guid");

                    b.HasIndex("IPV6Guid");

                    b.ToTable("T_DdnsConfigs", (string)null);
                });

            modelBuilder.Entity("DdnsSharp.Model.Netinterface", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("T_Netinterfaces", (string)null);
                });

            modelBuilder.Entity("DdnsSharp.Model.NetworkConfig", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Domains")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enable")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("NetinterfaceGuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Guid");

                    b.HasIndex("NetinterfaceGuid");

                    b.ToTable("T_NetworkConfigs", (string)null);
                });

            modelBuilder.Entity("DdnsSharp.Model.DdnsConfig", b =>
                {
                    b.HasOne("DdnsSharp.Model.NetworkConfig", "IPV4")
                        .WithMany()
                        .HasForeignKey("IPV4Guid");

                    b.HasOne("DdnsSharp.Model.NetworkConfig", "IPV6")
                        .WithMany()
                        .HasForeignKey("IPV6Guid");

                    b.Navigation("IPV4");

                    b.Navigation("IPV6");
                });

            modelBuilder.Entity("DdnsSharp.Model.NetworkConfig", b =>
                {
                    b.HasOne("DdnsSharp.Model.Netinterface", "Netinterface")
                        .WithMany()
                        .HasForeignKey("NetinterfaceGuid");

                    b.Navigation("Netinterface");
                });
#pragma warning restore 612, 618
        }
    }
}
